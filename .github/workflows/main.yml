name: Autoplan

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2  # OR "2" -> To retrieve the preceding commit.

      - name: Get changed ALL files
        id: changed-files-all
        uses: tj-actions/changed-files@v35
        with:
          dir_names: true
          dir_names_max_depth: 2
          json: true

      - name: List all changed files
        run: |
          for file in ${{ steps.changed-files-all.outputs.all_changed_files }}; do
            echo "$file was changed"
          done

      - name: Filter folders for matrix
        id: get_changed_folders
        run: |
          set -x
          echo Check files var: ${{ steps.changed-files-all.outputs.all_changed_and_modified_files }}
          DOMAIN=$(echo ${{ steps.changed-files-all.outputs.all_changed_and_modified_files }} | jq -c '[ .[] | select(test("^(non-)?prod")) ]' )
          ENVI=$(echo ${{ steps.changed-files-all.outputs.all_changed_and_modified_files }} | jq -c '[ .[] | select(test("^(non-)?prod")) ]' )
          SHARED=$(echo ${{ steps.changed-files-all.outputs.all_changed_and_modified_files }} | jq '[ .[] | select(test("^((?!(prod|CODEOWNERS|README|templates|^\\.$)).)*$")) ] | length' )
          echo "DOMAIN: $DOMAIN"
          echo "ENVI: $ENVI"
          echo "SHARED: $SHARED"
          shared () {
            #Create a json array that includes all domains for all environments
            for k in non-prod prod; do
              for folder in $(ls -1p $k/| grep '/$'); do
                echo "${k}/$folder";
              done;
            #This line converts output to json and use \n as separator for creating array elements
            done | jq -R -s -c 'split("\n")[:-1]' > shared-temp.json
            FOLDERS=$(cat shared-temp.json)
          }
          envi () {
            for folder in $( echo ${ENVI} | jq -r '.[]' ); do
              echo ${folder} | cut -d "/" -f1,2;
            done | jq -R -s -c 'split("\n")[:-1]' > envi-temp.json
            FOLDERS=$(cat envi-temp.json)
          }
          domain () {
            for domain in $( $DOMAIN ); do
              echo "${domain}";
            done | jq -R -s -c 'split("\n")[:-1]' > domain-temp.json
            FOLDERS=$(cat domain-temp.json)
          }
          # domain
          envi
          # shared
          # if [ ! -z "${DOMAIN}" ] || [ "${DOMAIN}" -ne 0 ]; then
          #   domain
          # elif [ ! -z "${ENVI}" ]; then
          #   envi
          # elif [ ! -z "${SHARED}" ]; then
          #   shared
          # else
          #   echo "no changes"
          # fi
          echo "all FOLDERS files changed: $FOLDERS"
          echo "::set-output name=list::${FOLDERS}"
