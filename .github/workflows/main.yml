name: Autoplan

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2  # OR "2" -> To retrieve the preceding commit.

      - name: Get changed ALL files
        id: changed-files-all
        uses: tj-actions/changed-files@v35
        with:
          dir_names: true
          dir_names_max_depth: 3
          json: true

      - name: Filter folders for matrix
        id: get_changed_folders
        run: |
          set -x
          CHANGES=$(echo ${{ steps.changed-files-all.outputs.all_changed_and_modified_files }})
          echo "All changes: ${CHANGES}"
          DOMAIN=$(echo ${CHANGES}        | jq -c '[ .[] | select(test("^(non-)?prod")) ]' )
          ENVI=$(echo ${CHANGES}          | jq -c '[ .[] | select(test("^(non-)?prod")) ]' )
          SHARED=$(echo ${CHANGES}        | jq '[ .[] | select(test("^((?!(prod|CODEOWNERS|README|templates|^\\.$)).)*$")) ] | length' )
          SHARED_FILES=$(echo ${CHANGES}  | jq '[ .[] | select(test("^((?!(prod|CODEOWNERS|README|templates|^\\.$)).)*$")) ]')
          echo "DOMAIN: ${DOMAIN}"
          echo "ENVI: ${ENVI}"
          echo "SHARED: ${SHARED}"
          echo "Shared files: ${SHARED_FILES}"
          if [ ! -z "${DOMAIN}" ] || [ "${DOMAIN}" -ne 0 ]; then
            for dom in $( echo "${DOMAIN}" ); do
              echo "${dom}";
            done | jq -R -s -c 'split("\n")[:-1]' > domain-temp.json
            FOLDERS=$(cat domain-temp.json)
          elif [ ! -z "${ENVI}" || [ "${ENVI}" -ne 0 ]; then
            for folder in $( echo ${ENVI} | jq -r '.[]' ); do
              echo ${folder} | cut -d "/" -f1,2;
            done | jq -R -s -c 'split("\n")[:-1]' > envi-temp.json
            FOLDERS=$(cat envi-temp.json)
          elif [ ! -z "${SHARED}" || [ "${SHARED}" -ne 0 ]; then
            #Create a json array that includes all domains for all environments
            for k in non-prod prod; do
              for folder in $(ls -1p $k/| grep '/$'); do
                  echo "${k}/$folder";
              done;
            #This line converts output to json and use \n as separator for creating array elements
            done | jq -R -s -c 'split("\n")[:-1]' > shared-temp.json
            FOLDERS=$(cat shared-temp.json)
          else
            echo "no changes"
          fi
          echo "all FOLDERS files changed: ${FOLDERS}"
          echo "::set-output name=list::${FOLDERS}"
